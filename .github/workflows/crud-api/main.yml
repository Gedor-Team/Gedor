name: Build and Deploy Backend to Cloud Deploy

on:
  push:
    paths:
      - 'cc/backend/**'
    branches:
      - main

env:
  APP: backend-app

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2.1.7
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }} # e.g., projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}     # e.g., my-service-account@my-project.iam.gserviceaccount.com

      # Step 3: Set up the Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      # Step 4: Authenticate Docker to Google Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GAR_LOCATION }}-docker.pkg.dev

      # Step 5: Build and push the container to Google Artifact Registry
      - name: Build and Push Container
        run: |
          docker build -t "${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ env.APP }}/${{ env.APP }}:${{ github.sha }}" ./cc/backend
          docker push "${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ env.APP }}/${{ env.APP }}:${{ github.sha }}"

      # Step 6: Render YAML manifests from templates
      - name: Render YAML manifests
        run: |
          export PROJECT_ID="${{ secrets.PROJECT_ID }}"
          export REGION="${{ secrets.REGION }}"
          for template in $(ls config/*.template.yaml); do
            envsubst < ${template} > ${template%%.*}.yaml
          done

      # Step 7: Apply the Cloud Deploy delivery pipeline
      - name: Apply Cloud Deploy Pipeline
        run: gcloud deploy apply --file config/clouddeploy.yaml --region ${{ secrets.GAR_LOCATION }}

      # Step 8: Create a unique release name
      - name: Generate Release Name
        run: |
          echo "RELEASE_NAME=${{ env.APP }}-${GITHUB_SHA::7}-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      # Step 9: Create a Cloud Deploy release
      - name: Create Cloud Deploy Release
        id: release
        uses: google-github-actions/create-cloud-deploy-release@v0
        with:
          delivery_pipeline: ${{ env.APP }}
          name: ${{ env.RELEASE_NAME }}
          region: ${{ secrets.REGION }}
          description: "${{ github.event.head_commit.message }}"
          skaffold_file: config/skaffold.yaml
          images: app=${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ env.APP }}/${{ env.APP }}:${{ github.sha }}

      # Step 10: Output release information
      - name: Report Cloud Deploy Release
        run: |
          echo "Created release: ${{ steps.release.outputs.name }}"
          echo "Release link: ${{ steps.release.outputs.link }}"
